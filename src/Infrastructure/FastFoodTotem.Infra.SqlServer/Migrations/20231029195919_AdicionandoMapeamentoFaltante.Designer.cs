// <auto-generated />
using System;
using FastFoodTotem.Infra.SqlServer.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FastFoodTotem.Infra.SqlServer.Migrations
{
    [DbContext(typeof(FastFoodContext))]
    [Migration("20231029195919_AdicionandoMapeamentoFaltante")]
    partial class AdicionandoMapeamentoFaltante
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("FastFoodTotem")
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FastFoodTotem.Domain.Entities.CustomerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Email");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Identification");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Name");

                    b.HasKey("Id")
                        .HasName("CustomerId");

                    b.ToTable("Customer", "FastFoodTotem");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "joao_joao@joao.com",
                            Identification = "86617589041",
                            Name = "João José"
                        },
                        new
                        {
                            Id = 2,
                            Email = "maria_maria@maria.com",
                            Identification = "56419341000",
                            Name = "Maria José"
                        });
                });

            modelBuilder.Entity("FastFoodTotem.Domain.Entities.OrderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerId");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("Id")
                        .HasName("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Order", "FastFoodTotem");
                });

            modelBuilder.Entity("FastFoodTotem.Domain.Entities.OrderedItemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderId");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductId");

                    b.HasKey("Id")
                        .HasName("OrderedItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderedItem", "FastFoodTotem");
                });

            modelBuilder.Entity("FastFoodTotem.Domain.Entities.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Name");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Price");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.HasKey("Id")
                        .HasName("ProductId");

                    b.ToTable("Product", "FastFoodTotem");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Hamburguer",
                            Price = 13m,
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "X-Burguer",
                            Price = 20m,
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "X-Bacon",
                            Price = 25m,
                            Type = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "X-Frango",
                            Price = 25m,
                            Type = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "X-Salada",
                            Price = 15m,
                            Type = 1
                        },
                        new
                        {
                            Id = 6,
                            Name = "Batata Pequena",
                            Price = 5m,
                            Type = 2
                        },
                        new
                        {
                            Id = 7,
                            Name = "Batata Média",
                            Price = 7m,
                            Type = 2
                        },
                        new
                        {
                            Id = 8,
                            Name = "Batata Grande",
                            Price = 9m,
                            Type = 2
                        },
                        new
                        {
                            Id = 9,
                            Name = "Onion Ring Pequeno",
                            Price = 5m,
                            Type = 2
                        },
                        new
                        {
                            Id = 10,
                            Name = "Onion Ring Médio",
                            Price = 7m,
                            Type = 2
                        },
                        new
                        {
                            Id = 11,
                            Name = "Onion Ring Grande",
                            Price = 9m,
                            Type = 2
                        },
                        new
                        {
                            Id = 12,
                            Name = "Coca Cola Lata",
                            Price = 6m,
                            Type = 3
                        },
                        new
                        {
                            Id = 13,
                            Name = "Fanta Laranja Lata",
                            Price = 6m,
                            Type = 3
                        },
                        new
                        {
                            Id = 14,
                            Name = "Fanta Guaraná Lata",
                            Price = 6m,
                            Type = 3
                        },
                        new
                        {
                            Id = 15,
                            Name = "Sprite Lata",
                            Price = 6m,
                            Type = 3
                        },
                        new
                        {
                            Id = 16,
                            Name = "Fanta Uva Lata",
                            Price = 6m,
                            Type = 3
                        },
                        new
                        {
                            Id = 17,
                            Name = "Picolé Chocolate",
                            Price = 6m,
                            Type = 4
                        },
                        new
                        {
                            Id = 18,
                            Name = "Sorvete Casquinha",
                            Price = 3m,
                            Type = 4
                        },
                        new
                        {
                            Id = 19,
                            Name = "Pudim",
                            Price = 7m,
                            Type = 4
                        },
                        new
                        {
                            Id = 20,
                            Name = "Mousse de Maracujá",
                            Price = 10.5m,
                            Type = 4
                        },
                        new
                        {
                            Id = 21,
                            Name = "Torta de Morango",
                            Price = 13m,
                            Type = 4
                        });
                });

            modelBuilder.Entity("FastFoodTotem.Domain.Entities.OrderEntity", b =>
                {
                    b.HasOne("FastFoodTotem.Domain.Entities.CustomerEntity", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FastFoodTotem.Domain.Entities.OrderedItemEntity", b =>
                {
                    b.HasOne("FastFoodTotem.Domain.Entities.OrderEntity", "Order")
                        .WithMany("OrderedItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastFoodTotem.Domain.Entities.ProductEntity", "Product")
                        .WithMany("OrderedItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FastFoodTotem.Domain.Entities.CustomerEntity", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FastFoodTotem.Domain.Entities.OrderEntity", b =>
                {
                    b.Navigation("OrderedItems");
                });

            modelBuilder.Entity("FastFoodTotem.Domain.Entities.ProductEntity", b =>
                {
                    b.Navigation("OrderedItems");
                });
#pragma warning restore 612, 618
        }
    }
}
